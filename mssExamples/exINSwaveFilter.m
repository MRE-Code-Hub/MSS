% This script demonstrates the application of wave filtering techniques 
% for Inertial Navigation System (INS) measurements. It simulates a 
% position signal composed of a low-frequency (LF) component and a 
% wave-frequency (WF) component generated by colored noise. Two filtering 
% approaches are compared:
%
%   1. A Runge-Kutta 4th-order (RK4)-based notch filter.
%   2. An Infinite Impulse Response (IIR)-based notch filter.
%
% Additionally, a low-pass (LP) filter is applied after the notch filter 
% to further smooth the output.
%
% The script generates:
% - A test signal containing both LF and WF components.
% - Filtering results for both RK4 and IIR notch filters.
% - Results with an additional LP filter for further noise attenuation.
% - A comparative visualization of the filtering performance.
%
% Author: Thor I. Fossen
% Date: 2025-03-03
% Revisions: 

clearvars; 

% Sampling parameters
h = 0.05; % Sampling time 
T_final = 140; % Final simulation time in seconds

% Time vector initialization
t = (0:h:T_final)';             % Time vector from 0 to T_final          
nTimeSteps = length(t);         % Number of time steps

% Notch filter parameters
w_0 = 0.8; % Notch frequency in Hz
zeta_notch = 0.1; % Damping factor of notch filter
zeta_IIR = 0.5; % Damping factor of IIR filter

xf_RK4 = [0; 0]; % State vector for RK4-based filter
xf_IIR = [0; 0; 0; 0]; % State vector for IIR filter
xf_lp1 = 0; % Initial state vector for LP-filter #1
xf_lp2 = 0; % Initial state vector for LP-filter #2

% Test signal
omega_0 = 1.0; % Wave spectrum peak frequency
lambda = 0.1; % Wave spectrum relative damping ratio
K_wave = 1; % Wave amplitude gain

white_noise = randn(size(t)); 
s = tf('s'); 

H_s = K_wave * s / (s^2 + 2 * omega_0 * lambda * s + omega_0^2);
H_z = c2d(H_s, h, 'tutsin');
u_LF = 1 * sawToothWave(0.1 * t);
u = u_LF + lsim(H_z, white_noise, t); % LF + WF position

% Output storage
y_RK4 = zeros(1, nTimeSteps);
y_IIR = zeros(1, nTimeSteps);
y_RK4_LP = zeros(1, nTimeSteps);
y_IIR_LP = zeros(1, nTimeSteps);

% INS notch filtering
for k = 1:nTimeSteps
    [xf_RK4, y_RK4(k)] = notchFilter(xf_RK4, u(k), w_0, zeta_notch, h, 'RK4');
    [xf_lp1, y_RK4_LP(k)] = lowPassFilter(xf_lp1, y_RK4(k), 1.2*w_0, h); 
    [xf_IIR, y_IIR(k)] = notchFilter(xf_IIR, u(k), w_0, zeta_IIR, h, 'IIR');
    [xf_lp2, y_IIR_LP(k)] = lowPassFilter(xf_lp2, y_IIR(k), 1.2*w_0, h); 
end

% Plot results
figure(1);
subplot(211)
plot(t, u, 'g'); hold on;
plot(t, u_LF, 'k'); 
plot(t, y_RK4, 'b');
plot(t, y_IIR, 'r');
hold off
legend('LF+WF Test Signal','Sawtooth LF Signal','RK4-Based Notch Filter', 'IIR Notch Filter');
xlabel('Time [s]'); ylabel('Amplitude');
grid on;
title('Comparison of Notch Filters for INS Wave Filtering');
set(findall(gcf,'type','text'),'FontSize',14)
set(findall(gcf,'type','legend'),'FontSize',14)
set(findall(gcf,'type','line'),'linewidth',2)

subplot(212)
plot(t, u, 'g'); hold on;
plot(t, u_LF, 'k'); 
plot(t, y_RK4_LP,'b')
plot(t, y_IIR_LP,'r')
hold off
legend('LF+WF Test Signal','Sawtooth LF Signal', ...
    'RK4-Based Notch + LP Filter','IIR Notch + LP Filter');
xlabel('Time [s]'); ylabel('Amplitude');
grid on;
title('Comparison of Notch + LP Filters for INS Wave Filtering');
set(findall(gcf,'type','text'),'FontSize',14)
set(findall(gcf,'type','legend'),'FontSize',14)
set(findall(gcf,'type','line'),'linewidth',2)
